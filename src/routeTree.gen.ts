/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from "./routes/__root";
import { Route as apphomeIndexRouteImport } from "./routes/(app)/(home)/index";
import { Route as appAppointmentsIndexRouteImport } from "./routes/(app)/appointments/index";
import { Route as appClientsIndexRouteImport } from "./routes/(app)/clients/index";
import { Route as appProfileIndexRouteImport } from "./routes/(app)/profile/index";
import { Route as appRatingsIndexRouteImport } from "./routes/(app)/ratings/index";
import { Route as appRouteRouteImport } from "./routes/(app)/route";
import { Route as appServicesIndexRouteImport } from "./routes/(app)/services/index";
import { Route as appStaffsIndexRouteImport } from "./routes/(app)/staffs/index";
import { Route as authSignInRouteImport } from "./routes/(auth)/sign-in";
import { Route as InviteTokenIndexRouteImport } from "./routes/invite/$token.index";

const appRouteRoute = appRouteRouteImport.update({
	id: "/(app)",
	getParentRoute: () => rootRouteImport,
} as any);
const authSignInRoute = authSignInRouteImport.update({
	id: "/(auth)/sign-in",
	path: "/sign-in",
	getParentRoute: () => rootRouteImport,
} as any);
const InviteTokenIndexRoute = InviteTokenIndexRouteImport.update({
	id: "/invite/$token/",
	path: "/invite/$token/",
	getParentRoute: () => rootRouteImport,
} as any);
const appStaffsIndexRoute = appStaffsIndexRouteImport.update({
	id: "/staffs/",
	path: "/staffs/",
	getParentRoute: () => appRouteRoute,
} as any);
const appServicesIndexRoute = appServicesIndexRouteImport.update({
	id: "/services/",
	path: "/services/",
	getParentRoute: () => appRouteRoute,
} as any);
const appRatingsIndexRoute = appRatingsIndexRouteImport.update({
	id: "/ratings/",
	path: "/ratings/",
	getParentRoute: () => appRouteRoute,
} as any);
const appProfileIndexRoute = appProfileIndexRouteImport.update({
	id: "/profile/",
	path: "/profile/",
	getParentRoute: () => appRouteRoute,
} as any);
const appClientsIndexRoute = appClientsIndexRouteImport.update({
	id: "/clients/",
	path: "/clients/",
	getParentRoute: () => appRouteRoute,
} as any);
const appAppointmentsIndexRoute = appAppointmentsIndexRouteImport.update({
	id: "/appointments/",
	path: "/appointments/",
	getParentRoute: () => appRouteRoute,
} as any);
const apphomeIndexRoute = apphomeIndexRouteImport.update({
	id: "/(home)/",
	path: "/",
	getParentRoute: () => appRouteRoute,
} as any);

export interface FileRoutesByFullPath {
	"/sign-in": typeof authSignInRoute;
	"/": typeof apphomeIndexRoute;
	"/appointments": typeof appAppointmentsIndexRoute;
	"/clients": typeof appClientsIndexRoute;
	"/profile": typeof appProfileIndexRoute;
	"/ratings": typeof appRatingsIndexRoute;
	"/services": typeof appServicesIndexRoute;
	"/staffs": typeof appStaffsIndexRoute;
	"/invite/$token": typeof InviteTokenIndexRoute;
}
export interface FileRoutesByTo {
	"/sign-in": typeof authSignInRoute;
	"/": typeof apphomeIndexRoute;
	"/appointments": typeof appAppointmentsIndexRoute;
	"/clients": typeof appClientsIndexRoute;
	"/profile": typeof appProfileIndexRoute;
	"/ratings": typeof appRatingsIndexRoute;
	"/services": typeof appServicesIndexRoute;
	"/staffs": typeof appStaffsIndexRoute;
	"/invite/$token": typeof InviteTokenIndexRoute;
}
export interface FileRoutesById {
	__root__: typeof rootRouteImport;
	"/(app)": typeof appRouteRouteWithChildren;
	"/(auth)/sign-in": typeof authSignInRoute;
	"/(app)/(home)/": typeof apphomeIndexRoute;
	"/(app)/appointments/": typeof appAppointmentsIndexRoute;
	"/(app)/clients/": typeof appClientsIndexRoute;
	"/(app)/profile/": typeof appProfileIndexRoute;
	"/(app)/ratings/": typeof appRatingsIndexRoute;
	"/(app)/services/": typeof appServicesIndexRoute;
	"/(app)/staffs/": typeof appStaffsIndexRoute;
	"/invite/$token/": typeof InviteTokenIndexRoute;
}
export interface FileRouteTypes {
	fileRoutesByFullPath: FileRoutesByFullPath;
	fullPaths:
		| "/sign-in"
		| "/"
		| "/appointments"
		| "/clients"
		| "/profile"
		| "/ratings"
		| "/services"
		| "/staffs"
		| "/invite/$token";
	fileRoutesByTo: FileRoutesByTo;
	to:
		| "/sign-in"
		| "/"
		| "/appointments"
		| "/clients"
		| "/profile"
		| "/ratings"
		| "/services"
		| "/staffs"
		| "/invite/$token";
	id:
		| "__root__"
		| "/(app)"
		| "/(auth)/sign-in"
		| "/(app)/(home)/"
		| "/(app)/appointments/"
		| "/(app)/clients/"
		| "/(app)/profile/"
		| "/(app)/ratings/"
		| "/(app)/services/"
		| "/(app)/staffs/"
		| "/invite/$token/";
	fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
	appRouteRoute: typeof appRouteRouteWithChildren;
	authSignInRoute: typeof authSignInRoute;
	InviteTokenIndexRoute: typeof InviteTokenIndexRoute;
}

declare module "@tanstack/react-router" {
	interface FileRoutesByPath {
		"/(app)": {
			id: "/(app)";
			path: "";
			fullPath: "";
			preLoaderRoute: typeof appRouteRouteImport;
			parentRoute: typeof rootRouteImport;
		};
		"/(auth)/sign-in": {
			id: "/(auth)/sign-in";
			path: "/sign-in";
			fullPath: "/sign-in";
			preLoaderRoute: typeof authSignInRouteImport;
			parentRoute: typeof rootRouteImport;
		};
		"/invite/$token/": {
			id: "/invite/$token/";
			path: "/invite/$token";
			fullPath: "/invite/$token";
			preLoaderRoute: typeof InviteTokenIndexRouteImport;
			parentRoute: typeof rootRouteImport;
		};
		"/(app)/staffs/": {
			id: "/(app)/staffs/";
			path: "/staffs";
			fullPath: "/staffs";
			preLoaderRoute: typeof appStaffsIndexRouteImport;
			parentRoute: typeof appRouteRoute;
		};
		"/(app)/services/": {
			id: "/(app)/services/";
			path: "/services";
			fullPath: "/services";
			preLoaderRoute: typeof appServicesIndexRouteImport;
			parentRoute: typeof appRouteRoute;
		};
		"/(app)/ratings/": {
			id: "/(app)/ratings/";
			path: "/ratings";
			fullPath: "/ratings";
			preLoaderRoute: typeof appRatingsIndexRouteImport;
			parentRoute: typeof appRouteRoute;
		};
		"/(app)/profile/": {
			id: "/(app)/profile/";
			path: "/profile";
			fullPath: "/profile";
			preLoaderRoute: typeof appProfileIndexRouteImport;
			parentRoute: typeof appRouteRoute;
		};
		"/(app)/clients/": {
			id: "/(app)/clients/";
			path: "/clients";
			fullPath: "/clients";
			preLoaderRoute: typeof appClientsIndexRouteImport;
			parentRoute: typeof appRouteRoute;
		};
		"/(app)/appointments/": {
			id: "/(app)/appointments/";
			path: "/appointments";
			fullPath: "/appointments";
			preLoaderRoute: typeof appAppointmentsIndexRouteImport;
			parentRoute: typeof appRouteRoute;
		};
		"/(app)/(home)/": {
			id: "/(app)/(home)/";
			path: "/";
			fullPath: "/";
			preLoaderRoute: typeof apphomeIndexRouteImport;
			parentRoute: typeof appRouteRoute;
		};
	}
}

interface appRouteRouteChildren {
	apphomeIndexRoute: typeof apphomeIndexRoute;
	appAppointmentsIndexRoute: typeof appAppointmentsIndexRoute;
	appClientsIndexRoute: typeof appClientsIndexRoute;
	appProfileIndexRoute: typeof appProfileIndexRoute;
	appRatingsIndexRoute: typeof appRatingsIndexRoute;
	appServicesIndexRoute: typeof appServicesIndexRoute;
	appStaffsIndexRoute: typeof appStaffsIndexRoute;
}

const appRouteRouteChildren: appRouteRouteChildren = {
	apphomeIndexRoute: apphomeIndexRoute,
	appAppointmentsIndexRoute: appAppointmentsIndexRoute,
	appClientsIndexRoute: appClientsIndexRoute,
	appProfileIndexRoute: appProfileIndexRoute,
	appRatingsIndexRoute: appRatingsIndexRoute,
	appServicesIndexRoute: appServicesIndexRoute,
	appStaffsIndexRoute: appStaffsIndexRoute,
};

const appRouteRouteWithChildren = appRouteRoute._addFileChildren(
	appRouteRouteChildren,
);

const rootRouteChildren: RootRouteChildren = {
	appRouteRoute: appRouteRouteWithChildren,
	authSignInRoute: authSignInRoute,
	InviteTokenIndexRoute: InviteTokenIndexRoute,
};
export const routeTree = rootRouteImport
	._addFileChildren(rootRouteChildren)
	._addFileTypes<FileRouteTypes>();

import type { getRouter } from "./router.tsx";
import type { startInstance } from "./start.ts";

declare module "@tanstack/react-start" {
	interface Register {
		ssr: true;
		router: Awaited<ReturnType<typeof getRouter>>;
		config: Awaited<ReturnType<typeof startInstance.getOptions>>;
	}
}
